/**
 * Acquire a calibration Fourier Ptychography dataset.
 * 
 * This code acquires images by illuminating LEDs in a LED matrix in a spiral pattern starting from a center coordinate.
 * One image is acquired at each LED position.
 *
 * This script requires a FreeSerialPort device in your device configuration whose COM port matches the one below.
 */

/*
 * USER CONFIGURATION
 * =================================================================================================================================
 *
 * Data in this section should change based on your experimental details.
 */

// The coordinate of the on-axis LED as determined during the initial alignment
int[] centerLEDCoord = {12, 16};


// The number of LEDs to use during the calibration; can be less than the number of LEDs in the matrix
int numLEDs = 15 * 15;

// The base path to store the results
String basePath = "C:/Users/laboleb/Desktop/calibration/dataset_"

// Serial communications configuration
// Data here should change if the serial interface to the LED controller changes
String port = "COM5"; 
String commandTerminator = "\n"; 
String answerTerminator = "\n";
String drawCommand = "draw ";
String clearCommand = "fill 0";

/*
 * CODE BELOW THIS LINE IS NOT LIKELY TO CHANGE
 * =================================================================================================================================
 */

// The spiral direction as seen looking at the board, i.e. along positive z-axis in LED matrix
// coordinate system.
String direction = "clockwise";

// The three exposure times in ms
double[] exposureTime = {1000, 2500, 5000};

// The gain values in dB
float[] gain = {6, 10, 25};

// Returns the x, y index of a position on a square grid whose trajectory spirals outward from the center.
//
// This is used to illuminate one LED at a time in spiral pattern from the center.
int[] spiral(int index, int[] center, String direction) {
    int x = center[0];
    int y = center[1];
    if (index == 0) {
        return new int[]{x, y};
    }

    int step = 1;
    int stepsTaken = 0;
    HashMap directions = new HashMap();
    directions.put("counterclockwise", new int[]{0, 1, 1, 0, 0, -1, -1, 0});
    directions.put("clockwise", new int[]{0, 1, -1, 0, 0, -1, 1, 0});
    int directionIndex = 0;

    while (stepsTaken < index) {
        int dx = directions.get(direction)[directionIndex * 2];
        int dy = directions.get(direction)[directionIndex * 2 + 1];
        for (int i = 0; i < step; i++) {
            x += dx;
            y += dy;
            stepsTaken++;
            if (stepsTaken == index) {
                return new int[]{x, y};
            }
        }
        directionIndex = (directionIndex + 1) % 4;
        if (directionIndex % 2 == 0) {
            step++;
        }
    }

    return new int[]{x, y};
}

// Acquisiton configuration
import org.micromanager.data.Datastore;
import org.micromanager.display.DisplayWindow;

Datastore store;
DisplayWindow display;
cb = mm.data().coordsBuilder();

String saveLocation;

mmc.sleep(30000);

// Main acquisition loop
int[] currentCoords;
for (int j = 0; j < 3; j++) {
	mmc.sleep(5000);
	// Set exposure time
	double currentExposure = exposureTime[j];
	mmc.setExposure(currentExposure);
	//Set gain
	float currentGain = gain[j];
	mmc.setProperty("Grasshopper3 GS3-U3-23S6M_22562331", "Gain(dB)", currentGain);

	store = mm.data().createRAMDatastore();
	display = mm.displays().createDisplay(store);
	mm.displays().manage(store);
	
	for (int i = 0; i < numLEDs; i++) {
	    print("Iteration number " + i + " of " + (numLEDs - 1));
	
	    // Clear the LED matrix
	    mmc.setSerialPortCommand(port, clearCommand, commandTerminator);
	    answer = mmc.getSerialPortAnswer(port, answerTerminator); 
	
	    // Get the coordinates of the LED to illuminate
	    currentCoords = spiral(i, centerLEDCoord, direction);
	    print("LED x-coord: " + currentCoords[0] + ", LED y-coord: " + currentCoords[1]);
	
	    // Draw the pixel
	    mmc.setSerialPortCommand(port, drawCommand + currentCoords[0] + " " + currentCoords[1] +" 1", commandTerminator);
	    answer = mmc.getSerialPortAnswer(port, answerTerminator);
	
	    // Take image, assign coordinates, and put it in the image store.
	    images = mm.live().snap(true);
	    img = images.get(0);
	
	    metadata = img.getMetadata();
	    userDataBuilder = metadata.getUserData().copyBuilder();
	    userData = userDataBuilder
	        .putInteger("exposureTime", currentExposure)	    	
	        .putInteger("LEDCoordX", currentCoords[0])
	        .putInteger("LEDCoordY", currentCoords[1])
	        .putInteger("centerLEDCoordX", centerLEDCoord[0])
	        .putInteger("centerLEDCoordY", centerLEDCoord[1])
	        .build();
	    cMetadata = metadata.copyBuilderPreservingUUID().userData(userData).build();
	    coords = cb.time(i).build();
	    cImg = img.copyWith(coords, cMetadata);
	
	    store.putImage(cImg);
	    
	}
	store.freeze();
	saveLocation = basePath + String.valueOf(j);
	mmc.sleep(5000);
	store.save(Datastore.SaveMode.MULTIPAGE_TIFF, saveLocation);
	mmc.sleep(5000);
	
	store.close();
}
